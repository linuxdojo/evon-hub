#!/bin/bash

# This is an example/reference implementation for the standalone hook script called by the Evon app when
# in Standalone mode. This script is called by evon-hub/evon/evon_api.py when STANDALONE mode is enabled.
# It mimics the API responses provided by the Evon cloud API used to manage customer registartions and
# creates/destroys individual server DNS records as they connect to and disconnect from this Hub.
#
# This script can be writted in any language. Inputs are provided using environment variables as shown
# in the below BASH script, and responses must be in JSON, simply printed to stdout. The script will
# be executed as the "evonhub" user which is a low privilege user created during installation.

endpoint=$EVON_HOOK_REQUEST_URL
method=$EVON_HOOK_REQUEST_METHOD
headers=$EVON_HOOK_HEADERS
body=$EVON_HOOK_BODY
params=$EVON_HOOK_PARAMS


if [ "$endpoint" == "/api/zone/records" ]; then

    if [ "$EVON_HOOK_REQUEST_METHOD" == "put" ]; then
        # This endpoint receives a JSON object in $body listing server FQDN's and their IPv4
        # addresses that are newly connected, removed, updated or unchanged. The structure is:
        #   {
        #       "public-ipv4": "1.2.3.4",
        #       "changes": {
        #           "new": {
        #               "server1.example.com":"ipv4",
        #               ...
        #           },
        #           "removed": {
        #               "server2.example.com":"ipv4",
        #               ...
        #           },
        #           "updated": {
        #               "server3.example.com":"ipv4",
        #               ...
        #           },
        #           "unchanged": {
        #               "server4.example.com":"ipv4",
        #               ...
        #           }
        #       }
        #   }
        #
        # Implement your own way here to update your DNS records, creating/updating an A record for each
        # server listed under "new" or "updated", and deleting records listed under "removed". Also,
        # create or update the A record for the base account domain ('example.com' in the above example)
        # with the value of "public-ipv4" in the input JSON above
        #
        # The response must be in the format:
        #
        #   {
        #       "account_domain": "example.com",
        #       "subnet_key": "111",
        #       "public_ipv4": "1.2.3.4",
        #       "message": "success"
        #   }
        #
        # The value of `subnet_key` is whatever was chosen during registartion (default is "111", see below)

        account_domain=$(cat /opt/evon-hub/evon_vars.yaml | grep "account_domain:" | awk '{print $NF}' | sed 's/"//g')
        subnet_key=$(cat /opt/evon-hub/evon_vars.yaml | grep "subnet_key:" | cut -d" " -f2)
        public_ipv4=$(echo $body | jq -r '."public-ipv4"')
        message="success"
        echo "{\"account_domain\":\"${account_domain}\",\"subnet_key\":\"${subnet_key}\",\"public_ipv4\":\"${public_ipv4}\",\"message\":\"${message}\"}"

    elif [ "$EVON_HOOK_REQUEST_METHOD" == "get" ]; then
        # This endpoint retunrs all current server A records and their values, eg:
        #   {
        #     "server1.example.com": "100.111.224.6",
        #     "server2.example.com": "100.111.224.10"
        #   }
        # Use your own code to enumerate these records from your DNS zone and return them.
        echo "{}"

    fi

elif [ "$endpoint" == "/api/zone/register" ]; then
    # This endpoint is used to register a new SaaS deployment and to set the initial A record for the
    # base account domain. The IPv4 address to use to create/update the A record is in key named
    # "public-ipv4" in the JSON object in $body. Implement your own way to create/update this DNS record.
    #
    # The request in $body is:
    #
    #   {
    #       "domain-prefix": "example",
    #       "subnet-key": "111"
    #   }
    #
    # The value of `domain-prefix` is the first label of the FQDN provided via the --domain-name argument during registration.
    # The value of the `subnet-key` is whatever was provided during registration also.
    #
    # The response must be in the format:
    #
    #   {
    #       "account_domain": "example.com",
    #       "subnet_key": "111",
    #       "public_ipv4": "1.2.3.4",
    #       "message": "success"
    #   }
    account_domain=$(cat /opt/evon-hub/evon_vars.yaml | grep "account_domain:" | awk '{print $NF}' | sed 's/"//g')
    subnet_key=$(cat /opt/evon-hub/evon_vars.yaml | grep "subnet_key:" | cut -d" " -f2)
    public_ipv4=$(echo $body | jq -r '."public-ipv4"')
    message="success"
    echo "{\"account_domain\":\"${account_domain}\",\"subnet_key\":\"${subnet_key}\",\"public_ipv4\":\"${public_ipv4}\",\"message\":\"${message}\"}"


elif [ "$endpoint" == "/api/zone/deregister" ]; then
    # Used only for SaaS deployments
    echo '{}'

elif [[ "$endpoint" =~ ^/api/zone/update/ ]]; then
    # This endpoint is used only by SaaS deployments for upgrading the Evon Hub app. For standalone
    # deployments, simpy upgrade using the latest code/release in the master branch on Github, or implement
    # your own method here. The request url starts with "/api/zone/update/" and the remainder of the string
    # is the current version of Evon Hub.
    echo '{"update_available":false}'

fi
