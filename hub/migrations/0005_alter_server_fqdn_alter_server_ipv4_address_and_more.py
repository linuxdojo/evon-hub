# Generated by Django 4.1 on 2022-09-23 13:04

import django.core.validators
from django.db import migrations, models
import hub.models
import re


class Migration(migrations.Migration):

    dependencies = [
        ("hub", "0004_alter_config_options_server_last_connected_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="server",
            name="fqdn",
            field=models.CharField(
                editable=False,
                help_text="This value is set on line 2 of /etc/openvpn/evon.uuid on your endpoint server, with '.o82ml.dev.evon.link' appended. An index is auto added to the first name-part for uniqueness if needed. To change this value, edit /etc/openvpn/evon.uuid and restart OpenVPN on your endpoint server.",
                max_length=255,
                unique=True,
                validators=[hub.models.EvonFQDNValidator],
                verbose_name="FQDN",
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="ipv4_address",
            field=models.GenericIPAddressField(
                editable=False,
                help_text="This value is auto-assigned and static for this Server",
                protocol="IPv4",
                validators=[hub.models.EvonIPV4Validator],
                verbose_name="IPv4 Address",
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="last_connected",
            field=models.DateTimeField(
                blank=True, editable=False, null=True, verbose_name="Last Connected"
            ),
        ),
        migrations.AlterField(
            model_name="server",
            name="uuid",
            field=models.CharField(
                editable=False,
                help_text="This value is set on line 1 of /etc/openvpn/evon.uuid on your endpoint server.",
                max_length=36,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        regex=re.compile(
                            "^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}$"
                        )
                    )
                ],
                verbose_name="UUID",
            ),
        ),
    ]
