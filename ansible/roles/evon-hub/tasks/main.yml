---

### determine version

- name: set evon version fact
  ansible.builtin.set_fact:
    evon_version: "{{ lookup('file', '/opt/evon-hub/version.txt') }}"


### Setup ip forwarding

- name: enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    reload: yes


### Setup sslh

- name: check if sslh config file is modified
  ansible.builtin.shell: rpm -Vf /etc/sslh.cfg
  register: ssllh_cfg
  changed_when: false
  failed_when: false

- name: update sslh config file
  ansible.builtin.copy:
    src: sslh/sslh.cfg
    dest: /etc/sslh.cfg
  when: ssllh_cfg.rc == 0
  register: sslh_cfg_copy

- name: restart and persist sslh service
  ansible.builtin.service:
    name: sslh
    state: restarted
    enabled: true
  when: sslh_cfg_copy.changed


### Setup iptables

- name: configure iptables
  ansible.builtin.template:
    src: iptables/iptables
    dest: /etc/sysconfig/iptables
  register: iptables_copy

- name: ensure iptables service is started and persisted
  ansible.builtin.service:
    name: iptables
    enabled: true
    state: started
  when: not iptables_copy.changed

- name: conditionally restart and persist iptables service
  ansible.builtin.service:
    name: iptables
    state: restarted
    enabled: true
  when: iptables_copy.changed


### Setup rsyslog and logrotate

- name: configure rsyslog
  ansible.builtin.copy:
    src: rsyslog/evon.conf
    dest: /etc/rsyslog.d/evon.conf
  register: rsyslog_copy

- name: restart rsyslog
  ansible.builtin.service:
    name: rsyslog
    state: restarted
  when: rsyslog_copy.changed

- name: configure logrotate
  ansible.builtin.copy:
    src: logrotate/evon
    dest: /etc/logrotate.d/evon


### Setup easy-rsa

- name: configure easy-rsa dir
  ansible.builtin.set_fact:
    easy_rsa_dir: "/etc/openvpn/server/easy-rsa"

- name: deploy certificate authority

  block:

    - name: check if ca already deployed
      ansible.builtin.stat:
        path: "{{ easy_rsa_dir }}"
      register: easyrsa_dir

    - name: deploy ca scripts
      ansible.builtin.shell: "cp -r $(find /usr/share/easy-rsa -maxdepth 1 -mindepth 1 -type d) {{ easy_rsa_dir }}"
      when: not easyrsa_dir.stat.exists

    - name: deploy ca vars
      ansible.builtin.template:
        src: pki/vars
        dest: "{{ easy_rsa_dir }}/vars"

    - name: check if ca is initialised
      ansible.builtin.stat:
        path: "{{ easy_rsa_dir }}/pki/ca.crt"
      register: easyrsa_init

    - name: "initialise ca - this may take a while..."
      ansible.builtin.shell: |
        cd "{{ easy_rsa_dir }}"
        ./easyrsa init-pki
        ./easyrsa gen-dh
        ./easyrsa build-ca nopass <<< {{ ec2_id }}.ca.evon-hub
      when: not easyrsa_init.stat.exists

    - name: check if certs and keys are initialised
      ansible.builtin.stat:
        path: "{{ easy_rsa_dir }}/issued/{{ ec2_id }}.server.evon-hub"
      register: certs_keys_init

    - name: "build certs and keys"
      ansible.builtin.shell: |
        cd "{{ easy_rsa_dir }}"
        ./easyrsa build-server-full {{ ec2_id }}.server.evon-hub nopass
        ./easyrsa build-client-full {{ ec2_id }}.endpoint.evon-hub nopass
        ./easyrsa build-client-full {{ ec2_id }}.user.evon-hub nopass
        openvpn --genkey --secret pki/{{ ec2_id }}.ta.key
      when: not certs_keys_init.stat.exists

  rescue:

    - name: post-failure cleanup
      ansible.builtin.file:
        state: absent
        path: "{{ easy_rsa_dir }}"

    - name: post-failure exit
      ansible.builtin.fail:
        msg: "exiting due to failure in task: {{ ansible_failed_task.name }}"


### Create evonhub service account

- name: create evonhub service account user
  ansible.builtin.user:
    name: evonhub
    comment: User that runs the Evon Hub service
    shell: "/bin/false"

- name: allow evonhub user to run evon-deploy --update
  community.general.sudoers:
    name: evon-deploy
    state: present
    user: evonhub
    commands: "/opt/evon-hub/.env/bin/evon --update"


### setup OpenVPN

- name: create ccd dir
  ansible.builtin.file:
    path: /etc/openvpn/ccd
    state: directory

- name: deploy openvpn tcp server config
  ansible.builtin.template:
    src: openvpn/server/server_tcp.conf
    dest: /etc/openvpn/server/server_tcp.conf
  register: openvpn_tcp_cfg

- name: deploy openvpn udp server config
  ansible.builtin.template:
    src: openvpn/server/server_udp.conf
    dest: /etc/openvpn/server/server_udp.conf
  register: openvpn_udp_cfg

- name: restart openvpn tcp server
  ansible.builtin.service:
    name: openvpn-server@server_tcp.service
    state: restarted
    enabled: true
  when: openvpn_tcp_cfg.changed

- name: persist openvpn tcp service
  ansible.builtin.service:
    name: openvpn-server@server_tcp.service
    enabled: true
    state: started

- name: restart openvpn udp server
  ansible.builtin.service:
    name: openvpn-server@server_udp.service
    state: restarted
    enabled: true
  when: openvpn_udp_cfg.changed

- name: persist openvpn udp service
  ansible.builtin.service:
    name: openvpn-server@server_udp.service
    enabled: true
    state: started

- name: set permissions on server management unix socket
  ansible.builtin.file:
    path: /etc/openvpn/evon_mgmt_servers
    owner: evonhub
    group: root
    mode: '770'

- name: set permissions on server management unix socket
  ansible.builtin.file:
    path: /etc/openvpn/evon_mgmt_users
    owner: evonhub
    group: root
    mode: '770'

- name: configure sudo for openvpn scripts
  community.general.sudoers:
    name: evon-openvpn
    state: present
    user: openvpn
    commands:
      - "/opt/evon-hub/evon/openvpn_scripts/user_auth.py"
      - "/opt/evon-hub/evon/openvpn_scripts/user_connect.py"
      - "/opt/evon-hub/evon/openvpn_scripts/server_auth.py"
      - "/opt/evon-hub/evon/openvpn_scripts/server_connect.py"
      - "/opt/evon-hub/evon/openvpn_scripts/server_disconnect.py"


### Setup Evon Hub app

- name: set ownership of evonhub app
  ansible.builtin.shell: |
    chown -R evonhub /opt/evon-hub

- name: deploy evonhub.socket systemd unit
  ansible.builtin.copy:
    src: systemd/evonhub.socket
    dest: /usr/lib/systemd/system
  register: systemd_unit_evonhub_socket

- name: deploy evonhub systemd unit
  ansible.builtin.copy:
    src: systemd/evonhub.service
    dest: /usr/lib/systemd/system
  register: systemd_unit_evonhub

- name: deploy evonsync systemd unit
  ansible.builtin.copy:
    src: systemd/evonsync.service
    dest: /usr/lib/systemd/system
  register: systemd_unit_evonsync

- name: deploy evonsync timer systemd unit
  ansible.builtin.copy:
    src: systemd/evonsync.timer
    dest: /usr/lib/systemd/system
  register: systemd_unit_evonsync_timer

- name: reload systemd
  ansible.builtin.shell: systemctl daemon-reload
  when: |
    systemd_unit_evonhub_socket or
    systemd_unit_evonhub.changed or
    systemd_unit_evonsync.changed or
    systemd_unit_evonsync_timer.changed

- name: restart and persist evonhub.service
  ansible.builtin.service:
    name: evonhub.service
    state: restarted
    enabled: true

- name: start and persist evonhub socket
  ansible.builtin.service:
    name: evonhub.socket
    state: restarted
    enabled: true

- name: Enable evonsync timer unit
  ansible.builtin.systemd:
    name: evonsync.timer
    state: started
    enabled: yes

- name: setup evon timers and watchdogs
  ansible.builtin.copy:
    src: cron.d/evon
    dest: /etc/cron.d/evon


### Setup Nginx

- name: configure nginx
  ansible.builtin.template:
    src: nginx/evon.conf
    dest: /etc/nginx/conf.d/evon.conf.pre_certbot
  register: configure_nginx

- name: deploy nginx configuration
  ansible.builtin.shell: cp /etc/nginx/conf.d/evon.conf.pre_certbot /etc/nginx/conf.d/evon.conf
  when: configure_nginx.changed
  register: deploy_nginx

- name: restart nginx
  ansible.builtin.service:
    name: nginx
    state: restarted
    enabled: true
  when: deploy_nginx.changed

- name: persist nginx service
  ansible.builtin.service:
    name: nginx
    enabled: true
    state: started
  when: not deploy_nginx.changed


### Setup CertBot

- name: check if certbot already configured
  ansible.builtin.lineinfile:
    path: /etc/nginx/conf.d/evon.conf
    regexp: 'managed by Certbot'
    state: absent
  check_mode: yes
  changed_when: false
  register: certbot_config

- name: deploy certbot
  ansible.builtin.shell: certbot run -d {{ account_domain }} --nginx -n --agree-tos --email root@{{ account_domain }}
  when: not certbot_config.found
  register: certbot_deploy

- name: setup certbot auto renewal
  ansible.builtin.copy:
    src: cron.d/certbot
    dest: /etc/cron.d/certbot
  when: certbot_deploy.changed
  
- name: configure nginx bind port
  ansible.builtin.replace:
    path: /etc/nginx/conf.d/evon.conf
    regexp: '443'
    replace: '1443'
  when: certbot_deploy.changed

- name: restart nginx after certbot deploy
  ansible.builtin.service:
    name: nginx
    state: restarted
  when: certbot_deploy.changed


 ### Setup motd

- name: configure motd
  ansible.builtin.template:
    src: motd/motd
    dest: /etc/motd


### setup Bootstrappers

- name: check if bootstraps exist
  ansible.builtin.stat:
    path: /opt/evon-hub/bootstrap.sh
  register: bootstrap_script

- name: setup evon bootstrap scripts

  block:

    - name: create bootstrap build dir
      ansible.builtin.file:
        path: /opt/evon-hub/build_bootstrap
        state: directory

    - name: compute bootstrap key
      ansible.builtin.shell: 'curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -jr ".accountId, .instanceId" | md5sum | awk ''{print $1}'''
      register: bootstrap_key_cmd

    - name: set bootstrap facts
      ansible.builtin.set_fact:
        ca_cert: "{{ lookup('file', '{{ easy_rsa_dir }}/pki/ca.crt') }}"
        client_cert: "{{ lookup('file', '{{ easy_rsa_dir }}/pki/issued/{{ ec2_id }}.endpoint.evon-hub.crt') }}"
        client_key: "{{ lookup('file', '{{ easy_rsa_dir }}/pki/private/{{ ec2_id }}.endpoint.evon-hub.key') }}"
        tls_auth_key: "{{ lookup('file', '{{ easy_rsa_dir }}/pki/ta.key') }}"
        bootstrap_key: "{{ bootstrap_key_cmd.stdout }}"

    - name: render bootstrap client config
      ansible.builtin.template:
        src: bootstrap/openvpn_client.conf
        dest: /opt/evon-hub/build_bootstrap/openvpn_client.conf

    - name: render bootstrap secrets config
      ansible.builtin.template:
        src: bootstrap/openvpn_secrets.conf
        dest: /opt/evon-hub/build_bootstrap/openvpn_secrets.conf

    - name: render bootstrap installer script template
      ansible.builtin.template:
        src: bootstrap/bootstrap_template.sh
        dest: /opt/evon-hub/build_bootstrap/bootstrap.sh

    - name: encrypt bootstrap secrets
      ansible.builtin.shell: "openssl enc -md sha256 -aes-256-cbc -pass pass:{{ bootstrap_key }} -in /opt/evon-hub/build_bootstrap/openvpn_secrets.conf -out /opt/evon-hub/build_bootstrap/openvpn_secrets.conf.aes"

    - name: encode encrypted windows bootstrap secrets
      ansible.builtin.shell: |
        cd /opt/evon-hub/build_bootstrap
        cat openvpn_secrets.conf.aes | base64 > openvpn_secrets.conf.aes.b64

    - name: set windows bootstrap secrets fact
      ansible.builtin.set_fact:
        encrypted_secret_config: "{{ lookup('file', '/opt/evon-hub/build_bootstrap/openvpn_secrets.conf.aes.b64') }}"

    - name: build Linux bootstrap script
      ansible.builtin.shell: |
        cd /opt/evon-hub/build_bootstrap
        tar -c openvpn_client.conf openvpn_secrets.conf.aes | gzip | base64 >> bootstrap.sh
        chmod +x /opt/evon-hub/build_bootstrap/bootstrap.sh
        mv /opt/evon-hub/build_bootstrap/bootstrap.sh /opt/evon-hub

    - name: build Windows bootstrap script
      ansible.builtin.template:
        src: bootstrap/bootstrap_template.ps1
        dest: /opt/evon-hub/bootstrap.ps1

    - name: create openvpn user client config
      ansible.builtin.template:
        src: openvpn/client/client.ovpn
        dest: /opt/evon-hub/EvonHub.ovpn

    - name: cleanup
      ansible.builtin.file:
        state: absent
        path: /opt/evon-hub/build_bootstrap

  when: not bootstrap_script.stat.exists

  rescue:

    - name: post-failure cleanup
      ansible.builtin.file:
        state: absent
        path: /opt/evon-hub/build_bootstrap

    - name: post-failure exit
      ansible.builtin.fail:
        msg: "exiting due to failure in task: {{ ansible_failed_task.name }}"
