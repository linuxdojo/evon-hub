---

### Setup base OS

- name: validate Amazon Linux
  shell: grep "Amazon Linux" /etc/system-release
  changed_when: false

- name: install epel release
  shell: |
    rpm -qi epel-release >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      yes | amazon-linux-extras install epel
    fi
  register: shell_output
  changed_when: "'Installing:' in shell_output.stdout"

- name: enable ipv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    reload: yes


### Setup sslh

- name: check if sslh config file is modified
  shell: rpm -Vf /etc/sslh.cfg
  register: ssllh_cfg
  changed_when: false
  failed_when: false

- name: update sslh config file
  ansible.builtin.copy:
    src: sslh/sslh.cfg
    dest: /etc/sslh.cfg
  when: ssllh_cfg.rc == 0
  register: sslh_cfg_copy

- name: restart sslh service
  ansible.builtin.service:
    name: sslh
    state: restarted
  when: sslh_cfg_copy.changed


### Setup bins

- name: copy bin files
  ansible.builtin.copy:
    src: bin/
    dest: /usr/local/bin/
    mode: 755

### Setup iptables

- name: configure iptables
  ansible.builtin.template:
    src: iptables/iptables
    dest: /etc/sysconfig/iptables
  register: iptables_copy

- name: ensure iptables service is started and persisted
  ansible.builtin.service:
    name: iptables
    enabled: true
    state: started
  when: not iptables_copy.changed

- name: conditionally restart and persist iptables service
  ansible.builtin.service:
    name: iptables
    state: restarted
    enabled: true
  when: iptables_copy.changed


### Setup Squid

- name: configure squid
  ansible.builtin.service:
    name: squid
    enabled: true
    state: started


### Setup rsyslog and logrotate

- name: configure rsyslog
  ansible.builtin.copy:
    src: rsyslog/evon.conf
    dest: /etc/rsyslog.d/evon.conf
  register: rsyslog_copy

- name: restart rsyslog
  ansible.builtin.service:
    name: rsyslog
    state: restarted
  when: rsyslog_copy.changed

- name: configure logrotate
  ansible.builtin.copy:
    src: logrotate/evon
    dest: /etc/logrotate.d/evon


### Setup Nginx

- name: check if nginx config is present
  ansible.builtin.stat:
    path: /etc/nginx/conf.d/evon.conf
  register: nginx_config_file

- name: configure nginx
  ansible.builtin.template:
    src: nginx/evon.conf
    dest: /etc/nginx/conf.d/evon.conf
  when: not nginx_config_file.stat.exists
  register: configure_nginx

- name: restart nginx
  ansible.builtin.service:
    name: nginx
    state: restarted
  when: configure_nginx.changed

- name: persist nginx service
  ansible.builtin.service:
    name: nginx
    enabled: true
    state: started


### Setup CertBot

- name: check if certbot already configured
  ansible.builtin.lineinfile:
    path: /etc/nginx/conf.d/evon.conf
    regexp: 'managed by Certbot'
    state: absent
  check_mode: yes
  changed_when: false
  register: certbot_config

- name: deploy certbot
  shell: certbot run -d {{ account_domain }} --nginx -n --agree-tos --email root@{{ account_domain }}
  when: not certbot_config.found
  register: certbot_deploy

- name: setup certbot auto renewal
  ansible.builtin.copy:
    src: cron.d/certbot
    dest: /etc/cron.d/certbot
  when: certbot_deploy.changed
  
- name: configure nginx bind port
  ansible.builtin.replace:
    path: /etc/nginx/conf.d/evon.conf
    regexp: '443'
    replace: '1443'
  when: certbot_deploy.changed

- name: restart nginx after certbot deploy
  ansible.builtin.service:
    name: nginx
    state: restarted
  when: certbot_deploy.changed


 ### Setup motd

- name: configure motd
  ansible.builtin.copy:
    src: motd/motd
    dest: /etc/motd


# TODO:
### setup EasyRSA
### setup OpenVPN
### setup Mapper
### setup Bootstrapper

